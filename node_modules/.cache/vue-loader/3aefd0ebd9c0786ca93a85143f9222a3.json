{"remainingRequest":"/Users/yuxue/Desktop/web/data_collect_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuxue/Desktop/web/data_collect_web/src/components/Websites.vue?vue&type=style&index=0&id=4da6d7aa&scoped=true&lang=css&","dependencies":[{"path":"/Users/yuxue/Desktop/web/data_collect_web/src/components/Websites.vue","mtime":1622130609774},{"path":"/Users/yuxue/Desktop/web/data_collect_web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuxue/Desktop/web/data_collect_web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yuxue/Desktop/web/data_collect_web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yuxue/Desktop/web/data_collect_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuxue/Desktop/web/data_collect_web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWJyZWFkY3J1bWJ7CiAgbWFyZ2luLWJvdHRvbToxNXB4OwogIGZvbnQtc2l6ZTogMTJweDsKfQouZWwtY2FyZHsKICBib3gtc2hhZG93OiAwIDFweCAxcHggcmdiYSgwLDAsMCwwLjI1KSFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["Websites.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Websites.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>采集设备管理</el-breadcrumb-item>\n      <el-breadcrumb-item>网站爬虫</el-breadcrumb-item>\n      <el-breadcrumb-item>网站爬虫信息展示</el-breadcrumb-item>\n    </el-breadcrumb>\n    <el-card>\n      <el-button type=\"primary\" @click=\"addWebsiteVisible = true\">新增网站</el-button>\n      <el-dialog title=\"新增网站\" :visible.sync=\"addWebsiteVisible\" width=\"50%\">\n        <el-form :model=\"websitesInfo\" :rules=\"addruleForm\" ref=\"addFormRef\" label-width=\"100px\" @close=\"resetForm()\">\n          <el-form-item label=\"网站名称\" prop=\"websiteName\">\n            <el-input v-model=\"websitesInfo.websiteName\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"url\" prop=\"url\">\n            <el-input v-model=\"websitesInfo.url\"></el-input>\n          </el-form-item>\n        </el-form>\n        <span slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"addWebsiteVisible = false\">取 消</el-button>\n          <el-button type=\"warning\" @click=\"testWebsite(websitesInfo.url)\">测试联通</el-button>\n          <el-button type=\"primary\" @click=\"addWebsite()\">添加设备</el-button>\n        </span>\n      </el-dialog>\n      <el-table :data=\"websites\" stripe border style=\"width: 100%\">\n        <el-table-column type=\"index\"></el-table-column>\n        <el-table-column prop=\"websiteName\" label=\"网站名称\"> </el-table-column>\n        <el-table-column prop=\"url\" label=\"网站url\"> </el-table-column>\n        <el-table-column prop=\"state\" label=\"网站状态\"></el-table-column>\n        <el-table-column prop = \"offOrOn\" label=\"网站检测\">\n          <template slot-scope=\"scope\">\n            <el-switch v-model=\"scope.row.offOrOn\" @change=\"stateOffOrOn(scope.row)\">\n            </el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"爬虫状态\"></el-table-column>\n      </el-table>\n    </el-card>\n  </div>\n</template>\n<script>\nexport default {\n  data () {\n    return {\n      // 监测\n      addWebsiteVisible: false,\n      websites: [{\n        websiteName: 'll',\n        url: 'll',\n        state: '未开启',\n        offOrOn: false\n      }, {\n        websiteName: 'll',\n        url: 'll',\n        state: '未开启',\n        offOrOn: false\n      }],\n      websitesInfo: {\n        websiteName: '',\n        url: '',\n        state: '未开启'\n      },\n      addruleForm: {\n        websiteName: [\n          { required: true, message: '请输入网站名称', trigger: 'blur' }\n        ],\n        url: [\n          { required: true, message: '请输入url地址', trigger: 'blur' }\n        ]\n\n      }\n\n    }\n  },\n  created () {\n    this.getWebsitelist()\n  },\n  methods: {\n    addWebsite () {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return\n        const { data: res } = await this.$http.post('addWebsite', this.websitesInfo)\n        res.setHeader('Access-Control-Allow-Credentials', 'true')\n        if (res.code !== 200) return this.$message.error('网站添加失败')\n        this.$message.sucess('网站添加成功')\n        this.addWebsiteVisible = false\n      })\n    },\n    resetForm () {\n      this.$refs.addFormRef.resetFields()\n    },\n    async getWebsitelist () {\n      const { data: res } = await this.$http.get('listWebsites')\n      if (res.code !== 200) {\n        return this.$message.error('获取网站列表失败')\n      }\n      this.websites = res.entity\n    },\n    async stateOffOrOn (scope) {\n      this.$message.success('测试弹框的')\n      const params = new URLSearchParams()\n      params.append('url', scope.url)\n      const { data: res } = await this.$http.post('updateOffOrOn', params)\n      if (res.code !== 200) return this.$message.error('')\n      this.getWebsitelist()\n    },\n    // async stateChange (scope) {\n    //   console.log(scope)\n    //   const state = scope.offOrOn\n    //   const url = scope.url\n    //   if (state === true) {\n    //     const { data: res } = await this.$http.post('testWebsiteIsOkDurable', { url: url })\n    //     res.setHeader('Access-Control-Allow-Credentials', 'true')\n    //     if (res.code !== 200) return this.$message.error('网站持续检测未开启成功')\n    //     // this.websites.state = '连接正常'\n    //     this.getWebsitelist()\n    //     return this.$message.success('网站持续检测开启')\n    //   } else {\n    //     const params = new URLSearchParams()\n    //     params.append('url', url)\n    //     const { data: res } = await this.$http.post('stopTestWebsite', params)\n    //     res.setHeader('Access-Control-Allow-Credentials', 'true')\n    //     if (res.code !== 200) return this.$message.error('网站持续检测未关闭成功')\n    //     // this.websites.state = '未开启'\n    //     this.getWebsitelist()\n    //     return this.$message.success('网站检测关闭')\n    //   }\n    // },\n    async testWebsite (url) {\n      this.$message.success('测试弹框的')\n      const params = new URLSearchParams()\n      params.append('url', url)\n      const { data: res } = await this.$http.post('testWebsiteIsOk', params)\n      res.setHeader('Access-Control-Allow-Credentials', 'true')\n      if (res.code !== 200) return this.$message.error('该url地址不可达')\n      this.$message.success('该url可达')\n      this.addWebsiteVisible = false\n    }\n  }\n}\n</script>\n\n<style scoped>\n.el-breadcrumb{\n  margin-bottom:15px;\n  font-size: 12px;\n}\n.el-card{\n  box-shadow: 0 1px 1px rgba(0,0,0,0.25)!important;\n}\n</style>\n"]}]}